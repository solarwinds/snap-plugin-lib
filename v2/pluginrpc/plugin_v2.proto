syntax = "proto3";
package pluginrpc;

///////////////////////////////////////////////////////////////////////////////
// Services

service Controller {
    rpc Ping (PingRequest) returns (PingResponse);
    rpc Kill (KillRequest) returns (KillResponse);
}

service Collector {
    rpc Collect (CollectRequest) returns (stream CollectResponse);
    rpc Load (LoadCollectorRequest) returns (LoadCollectorResponse);
    rpc Unload (UnloadCollectorRequest) returns (UnloadCollectorResponse);
    rpc Info (InfoRequest) returns (InfoResponse);
}

service Publisher {
    rpc Publish (stream PublishRequest) returns (PublishResponse);
    rpc Load (LoadPublisherRequest) returns (LoadPublisherResponse);
    rpc Unload (UnloadPublisherRequest) returns (UnloadPublisherResponse);
    rpc Info (InfoRequest) returns (InfoResponse);
}

///////////////////////////////////////////////////////////////////////////////
// Service Controller definition

message PingRequest {
    // empty
}

message PingResponse {
    // empty
}

message KillRequest {
    // empty
}

message KillResponse {
    // empty
}

///////////////////////////////////////////////////////////////////////////////
// Service Collector definition

message CollectRequest {
    string task_id = 1;
}

message CollectResponse {
    repeated Metric metric_set = 1;
    repeated Warning warnings = 2;
}

message LoadCollectorRequest {
    string task_id = 1;
    bytes json_config = 2;
    repeated string metric_selectors = 3;
}

message LoadCollectorResponse {
    // empty
}

message UnloadCollectorRequest {
    string task_id = 1;
}

message UnloadCollectorResponse {
    // empty
}

message InfoRequest {
    string task_id = 1;
}

message InfoResponse {
    _legacy_info _legacy_info = 1;
    bytes info = 2;
}

//////////////////////////////////////////////////////////////////////////////
// Service Publisher definition

message PublishRequest {
    string task_id = 1;
    repeated Metric metric_set = 2;
}

message PublishResponse {
    repeated Warning warnings = 1;
}

message LoadPublisherRequest {
    string task_id = 1;
    bytes json_config = 2;
}

message LoadPublisherResponse {
    // empty
}

message UnloadPublisherRequest {
    string task_id = 1;
}

message UnloadPublisherResponse {
    // empty
}

///////////////////////////////////////////////////////////////////////////////
// Common messages definition

enum MetricType {
    UNKNOWN = 0;
    GAUGE = 1;
    COUNTER = 2;
    SUMMARY = 3;
    HISTOGRAM = 4;
}

message Metric {
    repeated Namespace namespace = 1;
    MetricValue value = 2;
    map<string, string> tags = 3;
    Time timestamp = 4;
    string description = 5;
    string unit = 6;
    MetricType type = 7;

}

message Namespace {
    string name = 1;
    string value = 2;
    string description = 3;
}

message MetricValue {
    oneof data_variant {
        float v_float = 1;
        double v_double = 2;
        int32 v_int32 = 3;
        int64 v_int64 = 4;
        uint32 v_uint32 = 5;
        uint64 v_uint64 = 6;
        bool v_bool = 7;
        bytes v_bytes = 8;
        string v_string = 9;
        int32 v_int16 = 10; // there is no int16 protobuf type, will be packed in int32
        uint32 v_uint16 = 11; // there is no uint16 protobuf type, will be packed in uint32
        Summary v_summary = 12;
        Histogram v_histogram = 13;
    }
}

message Time {
    int64 sec = 1;
    int64 nsec = 2;
}

message Warning {
    string message = 1;
    Time timestamp = 2;
}

message Summary {
    int64 count = 1;
    double sum = 2;
}

message Histogram {
    int64 count = 1;
    double sum = 2;
    repeated double bounds = 3; // can't use map<double, double>
    repeated double values = 4;
}

///////////////////////////////////////////////////////////////////////////////
// Info messages definition

message _legacy_info {
}
