/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/solarwinds/snap-plugin-lib/v2/bindings */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 20 "main.go"

#include <stdlib.h>
#include <stdio.h>
#include <memory.h>

// c types for callbacks
typedef void (callback_t)(char *);  // used for Collect, Load and Unload
typedef void (define_callback_t)(); // used for DefineCallback

// called from Go code
static inline void call_c_callback(callback_t callback, char * ctxId) { callback(ctxId); }
static inline void call_c_define_callback(define_callback_t callback) { callback(); }

// some helpers to manage C/Go memory/access interactions
enum value_type_t {
	TYPE_INVALID,
	TYPE_INT64,
	TYPE_UINT64,
	TYPE_INT32,
	TYPE_UINT32,
	TYPE_FLOAT,
	TYPE_DOUBLE,
	TYPE_BOOL,
	TYPE_CSTRING,
	TYPE_INT16,
	TYPE_UINT16
};

typedef struct {
	union  {
		long long v_int64;
		unsigned long long v_uint64;
		int v_int32;
		unsigned int v_uint32;
		float v_float;
		double v_double;
		int v_bool;
		char * v_cstring;
		short int v_int16;
		unsigned short int v_uint16;
	} value;
	int vtype; // value_type_t;
} value_t;

static inline value_t * alloc_value_t(enum value_type_t t) {
	value_t * val_ptr = malloc(sizeof(value_t));
	val_ptr->vtype = t;
	return val_ptr;
}

static inline void free_value_t(value_t * v) {
	if (v->vtype == TYPE_CSTRING) {
		free(v->value.v_cstring);
	}
	free(v);
}

static inline long long value_t_long_long(value_t * v) { return v->value.v_int64; }
static inline unsigned long long value_t_ulong_long(value_t * v) { return v->value.v_uint64; }
static inline int value_t_int(value_t * v) { return v->value.v_int32; }
static inline unsigned int value_t_uint(value_t * v) { return v->value.v_uint32; }
static inline float value_t_float(value_t * v) { return v->value.v_float; }
static inline double value_t_double(value_t * v) { return v->value.v_double; }
static inline int value_t_bool(value_t * v) { return v->value.v_bool; }
static inline char * value_t_cstring(value_t * v) { return v->value.v_cstring; }
static inline short int value_t_shortint(value_t * v) { return v->value.v_int16; }
static inline short int value_t_ushortint(value_t * v) { return v->value.v_uint16; }

static inline void set_value_t_long_long(value_t * v, long long v_int64) { v->value.v_int64 = v_int64; }
static inline void set_value_t_ulong_long(value_t * v, unsigned long long v_uint64) { v->value.v_uint64 = v_uint64; }
static inline void set_value_t_int(value_t * v, int v_int32) { v->value.v_int32 = v_int32; }
static inline void set_value_t_uint(value_t * v, unsigned int v_uint32) { v->value.v_uint32 = v_uint32; }
static inline void set_value_t_float(value_t * v, float v_float) { v->value.v_float = v_float; }
static inline void set_value_t_double(value_t * v, double v_double) { v->value.v_double = v_double; }
static inline void set_value_t_bool(value_t * v, int v_bool) { v->value.v_bool = v_bool; }
static inline void set_value_t_cstring(value_t * v, char * v_cstring) { v->value.v_cstring = v_cstring; }
static inline void set_value_t_shortint(value_t * v, short int v_int16) { v->value.v_int16 = v_int16; }
static inline void set_value_t_ushortint(value_t * v, unsigned short int v_uint16) { v->value.v_uint16 = v_uint16; }

typedef struct {
	char * key;
	char * value;
} map_element_t;

static inline map_element_t * alloc_map_element_t_array(int size) {
	map_element_t * map_arr = malloc(sizeof(map_element_t) * size);
	return map_arr;
}

static inline void free_map_element_t_array(map_element_t* m, int size) {
	int i;
	for(i = 0; i < size; i++) {
		free(m[i].key);
		free(m[i].value);
	}
	free(m);
}

static inline void set_tag_values(map_element_t * tag_arr, int index, char * key, char * value) {
	tag_arr[index].key = key;
	tag_arr[index].value = value;
}

typedef struct {
	map_element_t * elements;
	int length;
} map_t;

static inline map_t * alloc_map_t() {
	map_t * map = malloc(sizeof(map_t));
	return map;
}

static inline void free_map_t(map_t * m) {
	free_map_element_t_array(m->elements, m->length);
	free(m);
}

static inline void set_map_elements(map_t * map_ptr, map_element_t * elements) {
	map_ptr->elements = elements;
}

static inline char * get_map_key(map_t * map, int index) { return map->elements[index].key; }
static inline char * get_map_value(map_t * map, int index) { return map->elements[index].value; }
static inline int get_map_length(map_t * map) { return map->length; }

static inline void set_map_lenght(map_t * map, int length) { map->length = length; }

typedef struct {
	char * msg;
} error_t;

static inline error_t * alloc_error_msg(char * msg) {
	error_t * errMsg = malloc(sizeof(error_t));
	errMsg->msg = msg;
	return errMsg;
}

static inline void free_error_msg(error_t * err) {
	if (err == NULL) return;

	if (err->msg != NULL) {
		free(err->msg);
		err->msg = NULL;
	}

	free(err);
}

typedef struct {
	int sec;
	int nsec;
} time_with_ns_t;

static inline time_with_ns_t* alloc_time_with_ns_t() {
	return malloc(sizeof(time_with_ns_t));
}

static inline void free_time_with_ns_t(time_with_ns_t* t) {
	free(t);
}

static inline void set_time_with_ns_t(time_with_ns_t* time_ptr, int sec, int nsec) {
	time_ptr->sec = sec;
	time_ptr->nsec = nsec;
}

enum metric_type_t {
	METRIC_TYPE_UNKNOWN,
	METRIC_TYPE_GAUGE,
	METRIC_TYPE_SUM,
	METRIC_TYPE_SUMMARY,
	METRIC_TYPE_HISTOGRAM
};

typedef struct {
	map_t * tags_to_add;
	map_t * tags_to_remove;
	time_with_ns_t * timestamp;
	char * description;
	char * unit;
	int metric_type;
} modifiers_t;


static inline char** alloc_str_array(int size) {
	return malloc(sizeof(char*) * size);
}

static inline void free_str_array(char **arr) {
	if (arr == NULL) return;

	char * arrEl = *arr;
	for (;;) {
		if (arrEl == NULL) {
			break;
		}

		free(arrEl);
		arrEl++;
	}

	free(arr);
}

static inline void set_str_array_element(char **str_array, int index, char *element) {
	str_array[index] = element;
}

typedef struct {
	char * el_name;
	char * value;
	char * description;
} namespace_element_t;


static inline namespace_element_t * alloc_namespace_elem_arr(int size) {
	namespace_element_t * ne_arr = malloc(sizeof(namespace_element_t) * size);
	return ne_arr;
}

static inline void free_namespace_elem_arr(namespace_element_t * nm_array, int size) {
	int i;
	for(i=0; i < size; i++){
		free(nm_array[i].el_name);
		free(nm_array[i].value);
		free(nm_array[i].description);
	}
	free(nm_array);
}

static inline void set_namespace_element(namespace_element_t * ne_arr, int index, char * el_name, char * value, char * description) {
	ne_arr[index].el_name = el_name;
	ne_arr[index].value = value;
	ne_arr[index].description = description;
}


typedef struct {
	namespace_element_t * nm_elements;
	int nm_length;
	char * nm_string;
} namespace_t;


static inline namespace_t * alloc_namespace_t() {
	namespace_t* nm_ptr = malloc(sizeof(namespace_t));
	return nm_ptr;
}

static inline void free_namespace_t(namespace_t * namespace_ptr) {
	free_namespace_elem_arr(namespace_ptr->nm_elements, namespace_ptr->nm_length);
	free(namespace_ptr);
}
static inline void set_namespace_fields(namespace_t * nm_ptr, namespace_element_t * ne_arr, int nm_length, char * nm_string) {
	nm_ptr->nm_elements = ne_arr;
	nm_ptr->nm_length = nm_length;
	nm_ptr->nm_string= nm_string;
}

typedef struct {
	namespace_t * mt_namespace;
	char * mt_description;
	value_t *mt_value;
	time_with_ns_t * timestamp;
	map_t * tags; // free
} metric_t;


static inline metric_t** alloc_metric_pointer_array(int size) {
	metric_t ** arrPtr = malloc(sizeof(metric_t*) * size);
	int i;
	for(i=0; i < size; i++) {
		arrPtr[i] = malloc(sizeof(metric_t));
	}
	return arrPtr;
}

static inline void set_metric_pointer_array_element(metric_t** mt_array, int index, metric_t* element) {
	mt_array[index] = element;
}

static inline void set_metric_values(metric_t** mt_array, int index, namespace_t* mt_namespace, char* desc, value_t* val, time_with_ns_t* timestamp, map_t* tags) {
	mt_array[index]->mt_namespace = mt_namespace;
	mt_array[index]->mt_description = desc;
	mt_array[index]->mt_value = val;
	mt_array[index]->timestamp = timestamp;
	mt_array[index]->tags = tags;
}

static inline void free_metric_arr(metric_t** mt_array, int size) {
	if (mt_array == NULL) return;
	int i;
	for (i=0; i< size; i++) {
		if (mt_array[i] != NULL ) {
			free_namespace_t(mt_array[i]->mt_namespace);
			free_value_t(mt_array[i]->mt_value);
			free_time_with_ns_t(mt_array[i]->timestamp);
			free_map_t(mt_array[i]->tags);
			free(mt_array[i]);
	   }
   }
   free(mt_array);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void dealloc_charp(char* p);
extern __declspec(dllexport) void dealloc_str_array(char** p);
extern __declspec(dllexport) void dealloc_error(error_t* p);
extern __declspec(dllexport) void dealloc_metric_array(metric_t** p, GoInt size);
extern __declspec(dllexport) error_t* ctx_add_metric(char* ctxID, char* ns, value_t* v, modifiers_t* modifiers);
extern __declspec(dllexport) error_t* ctx_always_apply(char* ctxID, char* ns, modifiers_t* modifiers);
extern __declspec(dllexport) void ctx_dismiss_all_modifiers(char* ctxID);
extern __declspec(dllexport) GoInt ctx_should_process(char* ctxID, char* ns);
extern __declspec(dllexport) char** ctx_requested_metrics(char* ctxID);
extern __declspec(dllexport) GoInt ctx_count(char* ctxID);
extern __declspec(dllexport) metric_t** ctx_list_all_metrics(char* ctxID);
extern __declspec(dllexport) char* ctx_config_value(char* ctxID, char* key);
extern __declspec(dllexport) char** ctx_config_keys(char* ctxID);
extern __declspec(dllexport) char* ctx_raw_config(char* ctxID);
extern __declspec(dllexport) void ctx_add_warning(char* ctxID, char* message);
extern __declspec(dllexport) GoInt ctx_is_done(char* ctxID);
extern __declspec(dllexport) void ctx_log(char* ctxID, int level, char* message, map_t* fields);
extern __declspec(dllexport) void define_metric(char* namespace, char* unit, GoInt isDefault, char* description);
extern __declspec(dllexport) void define_group(char* name, char* description);
extern __declspec(dllexport) error_t* define_example_config(char* cfg);
extern __declspec(dllexport) void define_tasks_per_instance_limit(GoInt limit);
extern __declspec(dllexport) void define_instances_limit(GoInt limit);
extern __declspec(dllexport) void start_collector(callback_t* collectCallback, callback_t* loadCallback, callback_t* unloadCallback, define_callback_t* defineCallback, char* name, char* version);
extern __declspec(dllexport) void start_streaming_collector(callback_t* collectCallback, callback_t* loadCallback, callback_t* unloadCallback, define_callback_t* defineCallback, char* name, char* version);

/***************************************************************************/
extern __declspec(dllexport) void start_publisher(callback_t* publishCallback, callback_t* loadCallback, callback_t* unloadCallback, define_callback_t* defineCallback, char* name, char* version);

#ifdef __cplusplus
}
#endif
